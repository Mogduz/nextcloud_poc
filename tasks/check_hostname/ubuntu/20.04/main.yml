# =============================================================================
# File Documentation (auto-inserted)
# Generated: 2025-09-27T20:59:59Z
# Modified: 2025-09-27T20:59:59Z
# Path: tasks/check_hostname/ubuntu/20.04/main.yml
# Purpose: Updated to schema v1
# Notes: -
# =============================================================================

# =============================================================================
# File Summary (auto-inserted)
# Overview:
#   Role        : {{ summary.role | default(derived.role | default('n/a')) }}
#   Purpose     : {{ summary.purpose | default(meta.purpose | default('TBD')) }}
#   OS Scope    : {{ summary.os | default(derived.os | default('generic')) }} ({{ summary.os_scope | default(derived.os_scope | default('all')) }})
# Counts:
#   Tasks       : {{ summary.tasks_total | default('?') }}
#   Includes    : {{ summary.includes_total | default('?') }}
#   Handlers    : {{ summary.handlers_total | default('?') }}
#   Imports     : {{ summary.imports_total | default('?') }}
# Sets:
#   Modules     : {{ (summary.modules | default([])) | join(', ') | default('none') }}
#   Tags        : {{ (summary.tags | default([])) | join(', ') | default('none') }}
#   Guards      : {{ (summary.guards | default([])) | join(', ') | default('none') }}
# Flags:
#   Become      : {{ summary.become | default(derived.become | default('false')) }}
#   Idempotency : {{ summary.idempotency | default('convergent/guarded') }}
# Risk:
#   Level       : {{ summary.risk | default('medium') }}
#   Downtime    : {{ summary.downtime | default('n/a') }}
# Description: {{ summary.description | default('TBD') }}
# =============================================================================

# =============================================================================
# File Narrative (auto-inserted)
# This task file orchestrates a controlled, guarded operation on {{ summary.os | default(derived.os | default('generic')) }} ({{ summary.os_scope | default(derived.os_scope | default('all')) }}) hosts. When the guard condition{{ 's' if (summary.guards | default([]) | length) > 1 else '' }} {{ (summary.guards | default([])) | join(' and ') | default('is met') }} holds, it executes the main action using {{ (summary.modules | default([])) | join(', ') | default('the appropriate modules') }}. It then verifies availability, records minimal diagnostics, and exposes concise facts for downstream logic. The procedure is designed to be idempotent and convergent; reruns should result in no changes once the desired state is reached. Operationally, this action may be disruptive and typically requires privilege escalation; plan for a short, bounded downtime {{ '(' ~ summary.downtime ~ ')' if summary.downtime is defined else '' }}.
# =============================================================================

# -----------------------------------------------------------------------------

# Task: assert hostname var is set

# Description: TBD

# When: n/a

# Tags: n/a

# Changed by: auto-commenter

# -----------------------------------------------------------------------------

# --- [Task 95627652] {{ task.name | default('(unnamed task)') }}
# Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
# Module       : {{ task.action | default('unknown') }}
# Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
# When         : {{ task.when | default('always') }}
# Loop         : {{ task.loop | default('no') }}
# Register     : {{ task.register | default('none') }}
# Notify       : {{ task.notify | default('none') }}
# Tags         : {{ task.tags | default('none') }}
# Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
# Side-effects : {{ side_effects | default('minimal') }}
# Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
# Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
# ---------------------------------------------------------------------------
# --- Task Narrative [95627652] {{ task.name | default('(unnamed task)') }}
# {{ narrative.text | default(heuristics.compose) }}
# ---------------------------------------------------------------------------
- name: assert hostname var is set
  ansible.builtin.assert:
      that:
        - hostname is defined
        - (hostname | trim | length) > 0
      fail_msg: "BREAK: var 'hostname' is not defined or empty."
      success_msg: "hostname={{ hostname }} asseration passed"

# -----------------------------------------------------------------------------

# Task: gahter network facts

# Description: TBD

# When: n/a

# Tags: n/a

# Changed by: auto-commenter

# -----------------------------------------------------------------------------

# --- [Task f7358f30] {{ task.name | default('(unnamed task)') }}
# Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
# Module       : {{ task.action | default('unknown') }}
# Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
# When         : {{ task.when | default('always') }}
# Loop         : {{ task.loop | default('no') }}
# Register     : {{ task.register | default('none') }}
# Notify       : {{ task.notify | default('none') }}
# Tags         : {{ task.tags | default('none') }}
# Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
# Side-effects : {{ side_effects | default('minimal') }}
# Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
# Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
# ---------------------------------------------------------------------------
# --- Task Narrative [f7358f30] {{ task.name | default('(unnamed task)') }}
# {{ narrative.text | default(heuristics.compose) }}
# ---------------------------------------------------------------------------
- name: gahter network facts
  ansible.builtin.setup:
    gather_subset: [network]

# -----------------------------------------------------------------------------

# Task: Check if short name is identical (hostname can be FQDN)

# Description: TBD

# When: n/a

# Tags: n/a

# Changed by: auto-commenter

# -----------------------------------------------------------------------------

# --- [Task 20ffd355] {{ task.name | default('(unnamed task)') }}
# Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
# Module       : {{ task.action | default('unknown') }}
# Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
# When         : {{ task.when | default('always') }}
# Loop         : {{ task.loop | default('no') }}
# Register     : {{ task.register | default('none') }}
# Notify       : {{ task.notify | default('none') }}
# Tags         : {{ task.tags | default('none') }}
# Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
# Side-effects : {{ side_effects | default('minimal') }}
# Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
# Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
# ---------------------------------------------------------------------------
# --- Task Narrative [20ffd355] {{ task.name | default('(unnamed task)') }}
# {{ narrative.text | default(heuristics.compose) }}
# ---------------------------------------------------------------------------
- name: Check if short name is identical (hostname can be FQDN)
  ansible.builtin.assert:
    that:
      - (hostname | default('') | trim | length) > 0
      - ((hostname | trim | lower).split('.')[0]) == (ansible_facts.hostname | lower)
    fail_msg: "Mismatch: runtime short='{{ ansible_facts.hostname }}', provided='{{ hostname }}'"
    success_msg: hostname match! success
