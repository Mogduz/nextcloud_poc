- name: deploy_host
  hosts: owncloud
  gather_facts: true
  remote_user: root
  pre_tasks: 

    - name: get stat for host folder
      ansible.builtin.stat:
        path: "{{ vars_dir }}/hosts/{{ inventory_hostname }}"
      register: local_art
      delegate_to: localhost
      
    - name: skip this host if model folder is missing
      ansible.builtin.meta: end_host
      when: not local_art.stat.exists

    #- name: Servermodell laden (alle YAMLs des Hosts, sortiert)
    #  ansible.builtin.include_vars:
    #    dir: "{{ vars_dir }}/hosts/{{ inventory_hostname }}/"
    #    extensions: ["yml", "yaml"]
    #    depth: 1
    #    ignore_unknown_extensions: true
    #  register: _temp_host_cfg

    #- name: host_cfg_effective bauen (Listen anhängen)
    #  ansible.builtin.set_fact:
    #    host_cfg_effective: >-
    #      {{
    #        host_cfg_defaults | default({}) |
    #        combine(host_cfg | default({}), recursive=true, list_merge='append')
    #      }}

    - name: Servermodell laden (Datei für Datei; Dicts mergen)
      ansible.builtin.include_vars:
        file: "{{ item }}"
        hash_behaviour: merge
      loop: >-
        {{
          (query('ansible.builtin.fileglob', vars_dir ~ '/hosts/' ~ inventory_hostname ~ '/*.yml')
          + query('ansible.builtin.fileglob', vars_dir ~ '/hosts/' ~ inventory_hostname ~ '/*.yaml'))
          | sort
        }}

    - name: host_cfg_effective bauen (Deep-Merge; Listen anhängen)
      ansible.builtin.set_fact:
        host_cfg_effective: >-
          {{
            (host_cfg_defaults | default({}))
            | ansible.builtin.combine(host_cfg | default({}), recursive=true, list_merge='append')
          }}

    - name: debug
      ansible.builtin.debug:
        var: host_cfg_effective

    #- name: set host_cfg var
    #  ansible.builtin.set_fact:
    #     host_cfg: "{{ _temp_host_cfg.ansible_facts }}"

    - name: Initialize dynamic lists
      ansible.builtin.set_fact:
        dyn_roles: []
        dyn_pre_tasks: []
        dyn_reg_tasks: []
        dyn_fin_tasks: []

    - name: Normalize pre_tasks
      ansible.builtin.set_fact:
        dyn_pre_tasks: "{{ dyn_pre_tasks + [ (item if (item is mapping) else {'name': item}) ] }}"
      loop: "{{ host_cfg.deployment.pre_tasks | default([], true) }}"
      loop_control:
        label: "{{ (item.name if (item is mapping and 'name' in item) else item) }}"

    - name: Normalize roles
      ansible.builtin.set_fact:
        dyn_roles: "{{ dyn_roles + [ (item if (item is mapping) else {'name': item}) ] }}"
      loop: "{{ host_cfg.deployment.roles | default([], true) }}"
      loop_control:
        label: "{{ (item.name if (item is mapping and 'name' in item) else item) }}"

    - name: Normalize reg_tasks
      ansible.builtin.set_fact:
        dyn_reg_tasks: "{{ dyn_reg_tasks + [ (item if (item is mapping) else {'name': item}) ] }}"
      loop: "{{ host_cfg.deployment.reg_tasks | default([], true) }}"
      loop_control:
        label: "{{ (item.name if (item is mapping and 'name' in item) else item) }}"

    - name: Normalize fin_tasks
      ansible.builtin.set_fact:
        dyn_fin_tasks: "{{ dyn_fin_tasks + [ (item if (item is mapping) else {'name': item}) ] }}"
      loop: "{{ host_cfg.deployment.fin_tasks | default([], true) }}"
      loop_control:
        label: "{{ (item.name if (item is mapping and 'name' in item) else item) }}"

    - block:
      - name: Run deployment pre tasks
        ansible.builtin.include_tasks:
          file: "{{ tasks_dir }}/run_task/{{ os_dir }}/main.yml"
        vars:
          task_name: "{{ pre_task.name }}"
        when: pre_task.when | default(true)         
        loop: "{{ dyn_pre_tasks }}"
        loop_control:
          label: "{{ pre_task.name }}"
          loop_var: pre_task 

      - name: Flush handlers (if roles/tasks notified any)
        ansible.builtin.meta: flush_handlers

      when: dyn_pre_tasks | length > 0

  tasks:

    - block: 
      - name: running deployment roles
        ansible.builtin.include_role:
          name: "{{ item.name }}"
        loop: "{{ dyn_roles }}"
        loop_control:
          label: "{{ item.name }}"
      
      - name: Flush handlers (if roles/tasks notified any)
        ansible.builtin.meta: flush_handlers
      
      when: (dyn_roles | length > 0) and (item.when | default(true))

    - block:
      - name: Run dynamic reg_tasks
        ansible.builtin.include_tasks:
          file: "{{ tasks_dir }}/run_task/{{ os_dir }}/main.yml"
        vars:
          task_name: "{{ reg_task.name }}"
        when: reg_task.when | default(true)         
        loop: "{{ dyn_reg_tasks }}"
        loop_control:
          label: "{{ reg_task.name }}"
          loop_var: reg_task 

      - name: Flush handlers (if roles/tasks notified any)
        ansible.builtin.meta: flush_handlers

      when: dyn_reg_tasks | length > 0

    - block:
      - name: Run dynamic fin_tasks
        ansible.builtin.include_tasks:
          file: "{{ tasks_dir }}/run_task/{{ os_dir }}/main.yml"
        vars:
          task_name: "{{ fin_task.name }}"
        when: fin_task.when | default(true)         
        loop: "{{ dyn_fin_tasks }}"
        loop_control:
          label: "{{ fin_task.name }}"
          loop_var: fin_task 

      - name: Flush handlers (if roles/tasks notified any)
        ansible.builtin.meta: flush_handlers

      when: dyn_fin_tasks | length > 0