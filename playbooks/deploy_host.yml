# =============================================================================
# File Documentation (auto-inserted)
# Generated: 2025-09-27T20:59:58Z
# Modified: 2025-09-27T20:59:58Z
# Path: playbooks/deploy_host.yml
# Purpose: Updated to schema v1
# Notes: -
# =============================================================================

# =============================================================================
# File Summary (auto-inserted)
# Overview:
#   Type        : playbook
# Counts:
#   Plays       : {{ summary.plays_total | default('?') }}
#   Roles       : {{ summary.roles_total | default('?') }}
#   Imports     : {{ summary.imports_total | default('?') }}
# Sets:
#   Target Hosts: {{ (summary.hosts | default([])) | join(', ') | default('various') }}
#   Roles       : {{ (summary.roles | default([])) | join(', ') | default('none') }}
#   Tags        : {{ (summary.tags | default([])) | join(', ') | default('none') }}
# Description: {{ summary.description | default('Top-level orchestration of tasks/roles') }}
# =============================================================================

# =============================================================================
# File Narrative (auto-inserted)
# This playbook coordinates roles and tasks across target hosts. It should remain declarative and readable, with clear variable inputs and guarded operations to ensure safe convergence across environments.
# =============================================================================

# -----------------------------------------------------------------------------

# Task: deploy_host

# Description: TBD

# When: not local_art.stat.exists

# Tags: n/a

# Changed by: auto-commenter

# -----------------------------------------------------------------------------

# --- [Task 883cee5d] {{ task.name | default('(unnamed task)') }}
# Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
# Module       : {{ task.action | default('unknown') }}
# Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
# When         : {{ task.when | default('always') }}
# Loop         : {{ task.loop | default('no') }}
# Register     : {{ task.register | default('none') }}
# Notify       : {{ task.notify | default('none') }}
# Tags         : {{ task.tags | default('none') }}
# Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
# Side-effects : {{ side_effects | default('minimal') }}
# Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
# Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
# ---------------------------------------------------------------------------
# --- Task Narrative [883cee5d] {{ task.name | default('(unnamed task)') }}
# {{ narrative.text | default(heuristics.compose) }}
# ---------------------------------------------------------------------------
- name: deploy_host
  hosts: owncloud
  gather_facts: true
  remote_user: root
  pre_tasks: 

    # -----------------------------------------------------------------------------

    # Task: get stat for host folder

    # Description: TBD

    # When: not local_art.stat.exists

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 7575df54] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [7575df54] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: get stat for host folder
      ansible.builtin.stat:
        path: "{{ vars_dir }}/hosts/{{ inventory_hostname }}"
      register: local_art
      delegate_to: localhost
      
    # -----------------------------------------------------------------------------
      
    # Task: skip this host if model folder is missing
      
    # Description: TBD
      
    # When: not local_art.stat.exists
      
    # Tags: n/a
      
    # Changed by: auto-commenter
      
    # -----------------------------------------------------------------------------
      
    # --- [Task a063731d] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [a063731d] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: skip this host if model folder is missing
      ansible.builtin.meta: end_host
      when: not local_art.stat.exists

    # -----------------------------------------------------------------------------

    # Task: Gather host model files (sorted)

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task cf1d6d9c] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [cf1d6d9c] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Gather host model files (sorted)
      ansible.builtin.set_fact:
        _host_model_files: >-
          {{
            (query('ansible.builtin.fileglob', vars_dir ~ '/hosts/' ~ inventory_hostname ~ '/*.yml')
            + query('ansible.builtin.fileglob', vars_dir ~ '/hosts/' ~ inventory_hostname ~ '/*.yaml'))
            | sort
          }}

    # -----------------------------------------------------------------------------

    # Task: Load & merge 'host_cfg' from files (deep merge; append lists)

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 6b273ed5] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [6b273ed5] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Load & merge 'host_cfg' from files (deep merge; append lists)
      vars:
        _cur: {}
      block:
        # -----------------------------------------------------------------------------
        # Task: Load one file into a namespaced var
        # Description: TBD
        # When: pre_task.when | default(true)
        # Tags: n/a
        # Changed by: auto-commenter
        # -----------------------------------------------------------------------------
        # --- [Task 89722ef8] {{ task.name | default('(unnamed task)') }}
        # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
        # Module       : {{ task.action | default('unknown') }}
        # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
        # When         : {{ task.when | default('always') }}
        # Loop         : {{ task.loop | default('no') }}
        # Register     : {{ task.register | default('none') }}
        # Notify       : {{ task.notify | default('none') }}
        # Tags         : {{ task.tags | default('none') }}
        # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
        # Side-effects : {{ side_effects | default('minimal') }}
        # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
        # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
        # ---------------------------------------------------------------------------
        # --- Task Narrative [89722ef8] {{ task.name | default('(unnamed task)') }}
        # {{ narrative.text | default(heuristics.compose) }}
        # ---------------------------------------------------------------------------
        - name: Load one file into a namespaced var
          ansible.builtin.include_vars:
            file: "{{ item }}"
            name: _cur
          loop: "{{ _host_model_files }}"
          loop_control: { label: "{{ item | basename }}" }

        # -----------------------------------------------------------------------------

        # Task: Merge into host_cfg aggregator (only if dict)

        # Description: TBD

        # When: pre_task.when | default(true)

        # Tags: n/a

        # Changed by: auto-commenter

        # -----------------------------------------------------------------------------

        # --- [Task bbfd2569] {{ task.name | default('(unnamed task)') }}
        # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
        # Module       : {{ task.action | default('unknown') }}
        # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
        # When         : {{ task.when | default('always') }}
        # Loop         : {{ task.loop | default('no') }}
        # Register     : {{ task.register | default('none') }}
        # Notify       : {{ task.notify | default('none') }}
        # Tags         : {{ task.tags | default('none') }}
        # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
        # Side-effects : {{ side_effects | default('minimal') }}
        # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
        # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
        # ---------------------------------------------------------------------------
        # --- Task Narrative [bbfd2569] {{ task.name | default('(unnamed task)') }}
        # {{ narrative.text | default(heuristics.compose) }}
        # ---------------------------------------------------------------------------
        - name: Merge into host_cfg aggregator (only if dict)
          vars:
            _file_cur: "{{ lookup('ansible.builtin.file', item) | from_yaml | default({}, true) }}"
          ansible.builtin.set_fact:
            host_cfg: >-
              {{
                host_cfg | default({}) |
                ansible.builtin.combine(
                  _file_cur.host_cfg | default(_file_cur),
                  recursive=true,
                  list_merge='append'
                )
              }}
          loop: "{{ _host_model_files }}"
          loop_control: { label: "{{ item | basename }}" }

    # -----------------------------------------------------------------------------

    # Task: Build host_cfg_effective (deep; append lists)

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 702422fb] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [702422fb] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Build host_cfg_effective (deep; append lists)
      ansible.builtin.set_fact:
        host_cfg_effective: >-
          {{
            (host_cfg_defaults | default({})) |
            ansible.builtin.combine(host_cfg | default({}), recursive=true, list_merge='append')
          }}

    # -----------------------------------------------------------------------------

    # Task: set host_cfg var

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task fc0cf26c] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [fc0cf26c] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: set host_cfg var
      ansible.builtin.set_fact:
        host_cfg: "{{ host_cfg_effective }}"

    # -----------------------------------------------------------------------------

    # Task: debug

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 002f425d] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [002f425d] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: debug
      ansible.builtin.debug:
        var: host_cfg

    # -----------------------------------------------------------------------------

    # Task: Initialize dynamic lists

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 5d19326c] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [5d19326c] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Initialize dynamic lists
      ansible.builtin.set_fact:
        dyn_roles: []
        dyn_pre_tasks: []
        dyn_reg_tasks: []
        dyn_fin_tasks: []

    # -----------------------------------------------------------------------------

    # Task: Normalize pre_tasks

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 3194655c] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [3194655c] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Normalize pre_tasks
      ansible.builtin.set_fact:
        dyn_pre_tasks: "{{ dyn_pre_tasks + [ (item if (item is mapping) else {'name': item}) ] }}"
      loop: "{{ host_cfg.deployment.pre_tasks | default([], true) }}"
      loop_control:
        label: "{{ (item.name if (item is mapping and 'name' in item) else item) }}"

    # -----------------------------------------------------------------------------

    # Task: Normalize roles

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task ea5a525f] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [ea5a525f] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Normalize roles
      ansible.builtin.set_fact:
        dyn_roles: "{{ dyn_roles + [ (item if (item is mapping) else {'name': item}) ] }}"
      loop: "{{ host_cfg.deployment.roles | default([], true) }}"
      loop_control:
        label: "{{ (item.name if (item is mapping and 'name' in item) else item) }}"

    # -----------------------------------------------------------------------------

    # Task: Normalize reg_tasks

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 7f6cd996] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [7f6cd996] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Normalize reg_tasks
      ansible.builtin.set_fact:
        dyn_reg_tasks: "{{ dyn_reg_tasks + [ (item if (item is mapping) else {'name': item}) ] }}"
      loop: "{{ host_cfg.deployment.reg_tasks | default([], true) }}"
      loop_control:
        label: "{{ (item.name if (item is mapping and 'name' in item) else item) }}"

    # -----------------------------------------------------------------------------

    # Task: Normalize fin_tasks

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task c0de00f7] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [c0de00f7] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Normalize fin_tasks
      ansible.builtin.set_fact:
        dyn_fin_tasks: "{{ dyn_fin_tasks + [ (item if (item is mapping) else {'name': item}) ] }}"
      loop: "{{ host_cfg.deployment.fin_tasks | default([], true) }}"
      loop_control:
        label: "{{ (item.name if (item is mapping and 'name' in item) else item) }}"

    # -----------------------------------------------------------------------------

    # Task: debug normalized lists

    # Description: TBD

    # When: pre_task.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 67533027] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [67533027] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: debug normalized lists
      ansible.builtin.debug:
        msg: |
          dyn_pre_tasks: {{ dyn_pre_tasks | length }}
          dyn_roles:     {{ dyn_roles | length }}
          dyn_reg_tasks: {{ dyn_reg_tasks | length }}
          dyn_fin_tasks: {{ dyn_fin_tasks | length }}

  roles:

  tasks:

    - block:

      # -----------------------------------------------------------------------------

      # Task: Run dynamic pre_tasks

      # Description: TBD

      # When: pre_task.when | default(true)

      # Tags: n/a

      # Changed by: auto-commenter

      # -----------------------------------------------------------------------------

      # --- [Task 0e95c969] {{ task.name | default('(unnamed task)') }}
      # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
      # Module       : {{ task.action | default('unknown') }}
      # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
      # When         : {{ task.when | default('always') }}
      # Loop         : {{ task.loop | default('no') }}
      # Register     : {{ task.register | default('none') }}
      # Notify       : {{ task.notify | default('none') }}
      # Tags         : {{ task.tags | default('none') }}
      # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
      # Side-effects : {{ side_effects | default('minimal') }}
      # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
      # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
      # ---------------------------------------------------------------------------
      # --- Task Narrative [0e95c969] {{ task.name | default('(unnamed task)') }}
      # {{ narrative.text | default(heuristics.compose) }}
      # ---------------------------------------------------------------------------
      - name: Run dynamic pre_tasks
        ansible.builtin.include_tasks:
          file: "{{ tasks_dir }}/run_task/{{ os_dir }}/main.yml"
        vars:
          task_name: "{{ pre_task.name }}"
        when: pre_task.when | default(true)         
        loop: "{{ dyn_pre_tasks }}"
        loop_control:
          label: "{{ pre_task.name }}"
          loop_var: pre_task 

      # -----------------------------------------------------------------------------

      # Task: Flush handlers (if roles/tasks notified any)

      # Description: TBD

      # When: dyn_pre_tasks | length > 0

      # Tags: n/a

      # Changed by: auto-commenter

      # -----------------------------------------------------------------------------

      # --- [Task 78eb78dc] {{ task.name | default('(unnamed task)') }}
      # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
      # Module       : {{ task.action | default('unknown') }}
      # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
      # When         : {{ task.when | default('always') }}
      # Loop         : {{ task.loop | default('no') }}
      # Register     : {{ task.register | default('none') }}
      # Notify       : {{ task.notify | default('none') }}
      # Tags         : {{ task.tags | default('none') }}
      # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
      # Side-effects : {{ side_effects | default('minimal') }}
      # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
      # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
      # ---------------------------------------------------------------------------
      # --- Task Narrative [78eb78dc] {{ task.name | default('(unnamed task)') }}
      # {{ narrative.text | default(heuristics.compose) }}
      # ---------------------------------------------------------------------------
      - name: Flush handlers (if roles/tasks notified any)
        ansible.builtin.meta: flush_handlers

      when: dyn_pre_tasks | length > 0

    # -----------------------------------------------------------------------------

    # Task: Run dynamic roles

    # Description: TBD

    # When: role.when | default(true)

    # Tags: n/a

    # Changed by: auto-commenter

    # -----------------------------------------------------------------------------

    # --- [Task 0c17c19f] {{ task.name | default('(unnamed task)') }}
    # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
    # Module       : {{ task.action | default('unknown') }}
    # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
    # When         : {{ task.when | default('always') }}
    # Loop         : {{ task.loop | default('no') }}
    # Register     : {{ task.register | default('none') }}
    # Notify       : {{ task.notify | default('none') }}
    # Tags         : {{ task.tags | default('none') }}
    # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
    # Side-effects : {{ side_effects | default('minimal') }}
    # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
    # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
    # ---------------------------------------------------------------------------
    # --- Task Narrative [0c17c19f] {{ task.name | default('(unnamed task)') }}
    # {{ narrative.text | default(heuristics.compose) }}
    # ---------------------------------------------------------------------------
    - name: Run dynamic roles
      ansible.builtin.include_role:
        name: "{{ role.name }}"
      when: role.when | default(true)         
      loop: "{{ dyn_roles }}"
      loop_control:
        label: "{{ role.name }}"
        loop_var: role

    - block:

      # -----------------------------------------------------------------------------

      # Task: Run dynamic reg_tasks

      # Description: TBD

      # When: reg_task.when | default(true)

      # Tags: n/a

      # Changed by: auto-commenter

      # -----------------------------------------------------------------------------

      # --- [Task 22dc3cdc] {{ task.name | default('(unnamed task)') }}
      # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
      # Module       : {{ task.action | default('unknown') }}
      # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
      # When         : {{ task.when | default('always') }}
      # Loop         : {{ task.loop | default('no') }}
      # Register     : {{ task.register | default('none') }}
      # Notify       : {{ task.notify | default('none') }}
      # Tags         : {{ task.tags | default('none') }}
      # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
      # Side-effects : {{ side_effects | default('minimal') }}
      # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
      # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
      # ---------------------------------------------------------------------------
      # --- Task Narrative [22dc3cdc] {{ task.name | default('(unnamed task)') }}
      # {{ narrative.text | default(heuristics.compose) }}
      # ---------------------------------------------------------------------------
      - name: Run dynamic reg_tasks
        ansible.builtin.include_tasks:
          file: "{{ tasks_dir }}/run_task/{{ os_dir }}/main.yml"
        vars:
          task_name: "{{ reg_task.name }}"
        when: reg_task.when | default(true)         
        loop: "{{ dyn_reg_tasks }}"
        loop_control:
          label: "{{ reg_task.name }}"
          loop_var: reg_task 

      # -----------------------------------------------------------------------------

      # Task: Flush handlers (if roles/tasks notified any)

      # Description: TBD

      # When: dyn_reg_tasks | length > 0

      # Tags: n/a

      # Changed by: auto-commenter

      # -----------------------------------------------------------------------------

      # --- [Task 7f63d4f3] {{ task.name | default('(unnamed task)') }}
      # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
      # Module       : {{ task.action | default('unknown') }}
      # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
      # When         : {{ task.when | default('always') }}
      # Loop         : {{ task.loop | default('no') }}
      # Register     : {{ task.register | default('none') }}
      # Notify       : {{ task.notify | default('none') }}
      # Tags         : {{ task.tags | default('none') }}
      # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
      # Side-effects : {{ side_effects | default('minimal') }}
      # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
      # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
      # ---------------------------------------------------------------------------
      # --- Task Narrative [7f63d4f3] {{ task.name | default('(unnamed task)') }}
      # {{ narrative.text | default(heuristics.compose) }}
      # ---------------------------------------------------------------------------
      - name: Flush handlers (if roles/tasks notified any)
        ansible.builtin.meta: flush_handlers

      when: dyn_reg_tasks | length > 0

    - block:

      # -----------------------------------------------------------------------------

      # Task: Run dynamic fin_tasks

      # Description: TBD

      # When: fin_task.when | default(true)

      # Tags: n/a

      # Changed by: auto-commenter

      # -----------------------------------------------------------------------------

      # --- [Task 1b7e99b8] {{ task.name | default('(unnamed task)') }}
      # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
      # Module       : {{ task.action | default('unknown') }}
      # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
      # When         : {{ task.when | default('always') }}
      # Loop         : {{ task.loop | default('no') }}
      # Register     : {{ task.register | default('none') }}
      # Notify       : {{ task.notify | default('none') }}
      # Tags         : {{ task.tags | default('none') }}
      # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
      # Side-effects : {{ side_effects | default('minimal') }}
      # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
      # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
      # ---------------------------------------------------------------------------
      # --- Task Narrative [1b7e99b8] {{ task.name | default('(unnamed task)') }}
      # {{ narrative.text | default(heuristics.compose) }}
      # ---------------------------------------------------------------------------
      - name: Run dynamic fin_tasks
        ansible.builtin.include_tasks:
          file: "{{ tasks_dir }}/run_task/{{ os_dir }}/main.yml"
        vars:
          task_name: "{{ fin_task.name }}"
        when: fin_task.when | default(true)         
        loop: "{{ dyn_fin_tasks }}"
        loop_control:
          label: "{{ fin_task.name }}"
          loop_var: fin_task 

      # -----------------------------------------------------------------------------

      # Task: Flush handlers (if roles/tasks notified any)

      # Description: TBD

      # When: dyn_fin_tasks | length > 0

      # Tags: n/a

      # Changed by: auto-commenter

      # -----------------------------------------------------------------------------

      # --- [Task b51fa84c] {{ task.name | default('(unnamed task)') }}
      # Intent       : {{ intent | default(derived.intent_guess | default('Describe what this task ensures')) }}
      # Module       : {{ task.action | default('unknown') }}
      # Key Args     : {{ (task.args | default({})) | taskargs('name, pkg, state, path, src, dest, regexp, line, mode, owner, group, service, enabled') }}
      # When         : {{ task.when | default('always') }}
      # Loop         : {{ task.loop | default('no') }}
      # Register     : {{ task.register | default('none') }}
      # Notify       : {{ task.notify | default('none') }}
      # Tags         : {{ task.tags | default('none') }}
      # Idempotency  : {{ idempotency | default('module idempotent or guarded by conditions') }}
      # Side-effects : {{ side_effects | default('minimal') }}
      # Error Hdl    : {{ error_handling | default('fail fast; rely on module return/validate') }}
      # Expected     : {{ expected | default('converges; no repeated changes on reruns') }}
      # ---------------------------------------------------------------------------
      # --- Task Narrative [b51fa84c] {{ task.name | default('(unnamed task)') }}
      # {{ narrative.text | default(heuristics.compose) }}
      # ---------------------------------------------------------------------------
      - name: Flush handlers (if roles/tasks notified any)
        ansible.builtin.meta: flush_handlers

      when: dyn_fin_tasks | length > 0
